Pancake Sort
First part
The solution for the first part is straightforward. Given arr and k, Iterate through the the firstfloor((k+1)/2)items in the array and switch between thei’thitem and thek - i` item:

Pseudocode:

function flip(arr, k):
    pivot = floor((k+1)/ 2)
    for i from 0 to pivot:
        tmp = arr[i]
        arr[i] = arr[k - i]
        arr[k - i] = tmp
Time Complexity: the runtime of this function in O(k) since the loop runs k/2 times, and performs actions which take constant time.

Space Complexity: the memory space complexity is O(1) since no memory is required except i and tmp.

Second part
Notice the following property of the flipping function - if we call flip(arr, k), then the previous k-th element in the array is now the first element. Hence, if we find the maximal element, we can shift it to be the first element by one call to flip(arr, k), and then shift it to the last place by calling flip(arr, arr.length - 1). We can exploit this method further, by iterating i from arr.length - 1 to 1, finding the maximal element in the current i’th prefix, flipping the maximal element once to move it to the first place in the array, and a second time to put it in the i’th place in the array.

Pseudocode:

function pancakeSort(arr):
    for i from arr.length-1 to 1:
        maxIndex = findMaxIndexInPrefix(arr,i)
        flip(arr, maxIndex)
        flip(arr, i)

    return arr


function findMaxIndexInPrefix(arr, k):
    ans = 0
    for i from first to k:
        if arr[i] > arr[ans]:
            ans = i

    return ans
Running example:

Array	i	Current prefix	Maximal element in prefix	Next flip
[2, 3, 1, 5, 4]	4	[2, 3, 1, 5, 4]	5	flip(arr, 3)
[5, 1, 3, 2, 4]	4	[5, 1, 3, 2, 4]	5	flip(arr, 4)
[4, 2, 3, 1, 5]	3	[4, 2, 3, 1]	4	flip(arr, 0)
[4, 2, 3, 1, 5]	3	[4, 2, 3, 1]	4	flip(arr, 3)
[1, 3, 2, 4, 5]	2	[1, 3, 2]	3	flip(arr, 1)
[3, 1, 2, 4, 5]	2	[3, 1, 2]	3	flip(arr, 2)
[2, 1, 3, 4, 5]	1	[2, 1]	2	flip(arr, 0)
[2, 1, 3, 4, 5]	1	[2, 1]	2	flip(arr, 1)
[1, 2, 3, 4, 5]	-	-	-	-
Time Complexity: let N be the length of the input array. There are N-1 iterations, in each we place one element in its place. Every iteration takes 2 flips to move every member in the array to its place, and each takes O(N) at most. In addition, every iteration we find the maximal element, which is also done in O(N). There are N-1 iterations that take O(N) time thus in total the algorithm takes O(N^2) time.

Space Complexity: the algorithm doesn’t initiate more than a few auxiliary variables, thus it is entirely in place and uses only O(1) space.
